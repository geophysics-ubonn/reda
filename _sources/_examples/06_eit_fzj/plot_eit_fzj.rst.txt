
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/06_eit_fzj/plot_eit_fzj.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_06_eit_fzj_plot_eit_fzj.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_06_eit_fzj_plot_eit_fzj.py:


Importing FZJ EIT40/EIT160 data
===============================

This example shows how to import data from the various versions of the EIT
system developed by Zimmermann et al. 2008
(http://iopscience.iop.org/article/10.1088/0957-0233/19/9/094010/meta).

At this point we only support 3-point data, i.e., data which uses two
electrodes to inject current, and then uses all electrodes to measure the
resulting potential distribution against system ground. Classical four-point
configurations are then computed using superposition.

Required are two files: a data file (usually **eit_data_mnu0.mat** and a text
file (usually **configs.dat** containing the measurement configurations to
extract.

The configs.dat file contains the four-point spreads to be imported from the
measurement. This file is a text file with four columns (A, B, M, N),
separated by spaces or tabs. Each line denotes one measurement: ::

    1   2   4   3
    2   3   5   6

An alternative to the config.dat file is to permute all current injection
dipoles as voltage dipoles, resulting in a fully normal-reciprocal
configuration set. This set can be automatically generated from the measurement
data by providing a special function as the config-parameter in the import
function. This is explained below.

.. GENERATED FROM PYTHON SOURCE LINES 36-37

Import reda

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: default

    import reda








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Initialize an sEIT container

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default

    seit = reda.sEIT()

    # import the data
    seit.import_eit_fzj(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile='data_EIT40_v_EZ-2017/configs_large_dipoles_norrec.dat'
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Constructing four-point measurements
    Summary:
                    a           b  ...     frequency          rpha
    count  16280.0000  16280.0000  ...  16280.000000  16280.000000
    mean      10.5250     30.4750  ...   1328.935406   1232.306629
    std        5.8096      5.8096  ...   2885.893725   1823.550170
    min        1.0000     20.0000  ...      0.100000  -3141.584482
    25%        5.7500     25.7500  ...      1.000000     -9.388102
    50%       10.5000     30.5000  ...     31.250000     -1.038730
    75%       15.2500     35.2500  ...   1000.000000   3132.171261
    max       21.0000     40.0000  ...  10000.000000   3141.580651

    [8 rows x 7 columns]




.. GENERATED FROM PYTHON SOURCE LINES 49-51

an alternative would be to automatically create measurement configurations
from the current injection dipoles:

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: default

    from reda.importers.eit_fzj import MD_ConfigsPermutate

    # initialize an sEIT container
    seit_not_used = reda.sEIT()

    # import the data
    seit_not_used.import_eit_fzj(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile=MD_ConfigsPermutate
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Constructing four-point measurements
    Summary:
                    a           b  ...     frequency          rpha
    count  16280.0000  16280.0000  ...  16280.000000  16280.000000
    mean      10.5250     30.4750  ...   1328.935406    217.078193
    std        5.8096      5.8096  ...   2885.893725   1129.623431
    min        1.0000     20.0000  ...      0.100000  -3141.556931
    25%        5.7500     25.7500  ...      1.000000    -15.614618
    50%       10.5000     30.5000  ...     31.250000     -7.626176
    75%       15.2500     35.2500  ...   1000.000000     -5.227314
    max       21.0000     40.0000  ...  10000.000000   3141.584591

    [8 rows x 7 columns]




.. GENERATED FROM PYTHON SOURCE LINES 63-64

Compute geometric factors

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default

    import reda.utils.geometric_factors as redaK
    import reda.utils.fix_sign_with_K as redafixK

    K = redaK.compute_K_analytical(seit.data, spacing=0.25)
    redaK.apply_K(seit.data, K)
    redafixK.fix_sign_with_K(seit.data)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>a</th>
          <th>b</th>
          <th>m</th>
          <th>n</th>
          <th>datetime</th>
          <th>frequency</th>
          <th>Zg1</th>
          <th>Zg2</th>
          <th>Zg3</th>
          <th>Zg</th>
          <th>Is</th>
          <th>Il</th>
          <th>Iab</th>
          <th>Ileakage</th>
          <th>Zt</th>
          <th>r</th>
          <th>Vmn</th>
          <th>rpha</th>
          <th>id</th>
          <th>norrec</th>
          <th>rdiff</th>
          <th>rphadiff</th>
          <th>k</th>
          <th>rho_a</th>
          <th>sigma_a</th>
          <th>rho_a_complex</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>110</th>
          <td>1</td>
          <td>22</td>
          <td>2</td>
          <td>21</td>
          <td>2018-01-27 08:03:45.233560</td>
          <td>0.1</td>
          <td>1845.514039-309.918615j</td>
          <td>1830.103481-336.538264j</td>
          <td>1830.135759-348.659106j</td>
          <td>1835.251093-331.705328j</td>
          <td>0.004369+0.000378j</td>
          <td>-7.781986e-07-2.016430e-07j</td>
          <td>4.384991</td>
          <td>0.000804</td>
          <td>67.613572-0.476405j</td>
          <td>67.615251</td>
          <td>296.492266</td>
          <td>-7.045880</td>
          <td>74</td>
          <td>nor</td>
          <td>135.370540</td>
          <td>-3141.166197</td>
          <td>0.826735</td>
          <td>55.899888</td>
          <td>0.017889</td>
          <td>55.898501-0.393861j</td>
        </tr>
        <tr>
          <th>111</th>
          <td>2</td>
          <td>21</td>
          <td>1</td>
          <td>22</td>
          <td>2018-01-27 08:47:03.645680</td>
          <td>0.1</td>
          <td>1740.676857-298.630656j</td>
          <td>1729.294712-322.735738j</td>
          <td>1730.518216-332.929183j</td>
          <td>1733.496595-318.098526j</td>
          <td>0.004488+0.000382j</td>
          <td>-2.603903e-06-6.249216e-07j</td>
          <td>4.504308</td>
          <td>0.002678</td>
          <td>67.753805-0.448498j</td>
          <td>67.755289</td>
          <td>305.190720</td>
          <td>-6.619423</td>
          <td>74</td>
          <td>rec</td>
          <td>135.370540</td>
          <td>-3141.166197</td>
          <td>0.826735</td>
          <td>56.015663</td>
          <td>0.017852</td>
          <td>56.014436-0.370789j</td>
        </tr>
        <tr>
          <th>36</th>
          <td>1</td>
          <td>20</td>
          <td>2</td>
          <td>21</td>
          <td>2018-01-27 09:28:11.962861</td>
          <td>0.1</td>
          <td>1882.449148-332.761564j</td>
          <td>1867.017051-353.821789j</td>
          <td>1868.918746-358.069064j</td>
          <td>1872.794982-348.217472j</td>
          <td>0.004324+0.000389j</td>
          <td>8.166327e-07+2.159040e-07j</td>
          <td>4.341069</td>
          <td>0.000845</td>
          <td>68.595685-0.552429j</td>
          <td>68.597910</td>
          <td>297.788253</td>
          <td>-8.053239</td>
          <td>92</td>
          <td>nor</td>
          <td>0.106258</td>
          <td>0.590684</td>
          <td>0.829159</td>
          <td>56.878598</td>
          <td>0.017581</td>
          <td>56.876754-0.458052j</td>
        </tr>
        <tr>
          <th>37</th>
          <td>2</td>
          <td>21</td>
          <td>1</td>
          <td>20</td>
          <td>2018-01-27 08:47:03.645680</td>
          <td>0.1</td>
          <td>1740.676857-298.630656j</td>
          <td>1729.294712-322.735738j</td>
          <td>1730.518216-332.929183j</td>
          <td>1733.496595-318.098526j</td>
          <td>0.004488+0.000382j</td>
          <td>-2.603903e-06-6.249216e-07j</td>
          <td>4.504308</td>
          <td>0.002678</td>
          <td>68.489745-0.511118j</td>
          <td>68.491652</td>
          <td>308.507526</td>
          <td>-7.462554</td>
          <td>92</td>
          <td>rec</td>
          <td>0.106258</td>
          <td>0.590684</td>
          <td>0.829159</td>
          <td>56.790494</td>
          <td>0.017609</td>
          <td>56.788913-0.423798j</td>
        </tr>
        <tr>
          <th>74</th>
          <td>1</td>
          <td>22</td>
          <td>2</td>
          <td>23</td>
          <td>2018-01-27 08:03:45.233560</td>
          <td>0.1</td>
          <td>1845.514039-309.918615j</td>
          <td>1830.103481-336.538264j</td>
          <td>1830.135759-348.659106j</td>
          <td>1835.251093-331.705328j</td>
          <td>0.004369+0.000378j</td>
          <td>-7.781986e-07-2.016430e-07j</td>
          <td>4.384991</td>
          <td>0.000804</td>
          <td>61.405722-0.426200j</td>
          <td>61.407201</td>
          <td>269.270026</td>
          <td>-6.940618</td>
          <td>111</td>
          <td>nor</td>
          <td>0.180274</td>
          <td>-0.614708</td>
          <td>0.824762</td>
          <td>50.646313</td>
          <td>0.019745</td>
          <td>50.645094-0.351514j</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>16265</th>
          <td>21</td>
          <td>40</td>
          <td>18</td>
          <td>37</td>
          <td>2018-01-27 08:45:26.153105</td>
          <td>10000.0</td>
          <td>1214.971601-99.776976j</td>
          <td>1214.970677-99.777250j</td>
          <td>1214.970820-99.776733j</td>
          <td>1214.971033-99.776987j</td>
          <td>0.005267+0.000167j</td>
          <td>3.035386e-04-5.237910e-05j</td>
          <td>5.269442</td>
          <td>0.308025</td>
          <td>14.400491-0.787052j</td>
          <td>14.421983</td>
          <td>75.995798</td>
          <td>-54.600210</td>
          <td>1477</td>
          <td>rec</td>
          <td>0.176318</td>
          <td>14.544220</td>
          <td>2.811459</td>
          <td>40.546816</td>
          <td>0.024663</td>
          <td>40.486393-2.212765j</td>
        </tr>
        <tr>
          <th>16274</th>
          <td>19</td>
          <td>38</td>
          <td>21</td>
          <td>40</td>
          <td>2018-01-27 08:41:06.303742</td>
          <td>10000.0</td>
          <td>1487.062804-137.106700j</td>
          <td>1487.062909-137.107755j</td>
          <td>1487.061286-137.107605j</td>
          <td>1487.062333-137.107354j</td>
          <td>0.004855+0.000194j</td>
          <td>-1.159057e-04-8.547126e-05j</td>
          <td>4.858639</td>
          <td>0.144012</td>
          <td>24.556856-1.833682j</td>
          <td>24.625222</td>
          <td>119.645077</td>
          <td>-74.532549</td>
          <td>1478</td>
          <td>nor</td>
          <td>0.246324</td>
          <td>11.928511</td>
          <td>1.757913</td>
          <td>43.289002</td>
          <td>0.023101</td>
          <td>43.168820-3.223453j</td>
        </tr>
        <tr>
          <th>16275</th>
          <td>21</td>
          <td>40</td>
          <td>19</td>
          <td>38</td>
          <td>2018-01-27 08:45:26.153105</td>
          <td>10000.0</td>
          <td>1214.971601-99.776976j</td>
          <td>1214.970677-99.777250j</td>
          <td>1214.970820-99.776733j</td>
          <td>1214.971033-99.776987j</td>
          <td>0.005267+0.000167j</td>
          <td>3.035386e-04-5.237910e-05j</td>
          <td>5.269442</td>
          <td>0.308025</td>
          <td>24.331140-1.525221j</td>
          <td>24.378898</td>
          <td>128.463180</td>
          <td>-62.604038</td>
          <td>1478</td>
          <td>rec</td>
          <td>0.246324</td>
          <td>11.928511</td>
          <td>1.757913</td>
          <td>42.855985</td>
          <td>0.023334</td>
          <td>42.772030-2.681205j</td>
        </tr>
        <tr>
          <th>16278</th>
          <td>20</td>
          <td>39</td>
          <td>21</td>
          <td>40</td>
          <td>2018-01-27 09:26:34.516287</td>
          <td>10000.0</td>
          <td>1420.095538-150.390175j</td>
          <td>1420.096385-150.391266j</td>
          <td>1420.096148-150.391203j</td>
          <td>1420.096023-150.390881j</td>
          <td>0.004947+0.000221j</td>
          <td>-2.085763e-04-4.436973e-05j</td>
          <td>4.952257</td>
          <td>0.213243</td>
          <td>62.432660-5.558812j</td>
          <td>62.679642</td>
          <td>310.405690</td>
          <td>-88.802752</td>
          <td>1479</td>
          <td>nor</td>
          <td>0.022068</td>
          <td>16.100432</td>
          <td>0.829159</td>
          <td>51.971411</td>
          <td>0.019241</td>
          <td>51.766624-4.609141j</td>
        </tr>
        <tr>
          <th>16279</th>
          <td>21</td>
          <td>40</td>
          <td>20</td>
          <td>39</td>
          <td>2018-01-27 08:45:26.153105</td>
          <td>10000.0</td>
          <td>1214.971601-99.776976j</td>
          <td>1214.970677-99.777250j</td>
          <td>1214.970820-99.776733j</td>
          <td>1214.971033-99.776987j</td>
          <td>0.005267+0.000167j</td>
          <td>3.035386e-04-5.237910e-05j</td>
          <td>5.269442</td>
          <td>0.308025</td>
          <td>62.492054-4.551339j</td>
          <td>62.657574</td>
          <td>330.170428</td>
          <td>-72.702319</td>
          <td>1479</td>
          <td>rec</td>
          <td>0.022068</td>
          <td>16.100432</td>
          <td>0.829159</td>
          <td>51.953113</td>
          <td>0.019248</td>
          <td>51.815871-3.773785j</td>
        </tr>
      </tbody>
    </table>
    <p>16280 rows × 26 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 72-74

compute normal and reciprocal pairs
note that this is usually done on import once.

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default

    import reda.utils.norrec as norrec
    seit.data = norrec.assign_norrec_to_df(seit.data)








.. GENERATED FROM PYTHON SOURCE LINES 78-79

quadrupoles can be directly accessed using a pandas grouper

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: default

    print(seit.abmn)
    quadpole_data = seit.abmn.get_group((10, 29, 15, 34))
    print(quadpole_data[['a', 'b', 'm', 'n', 'frequency', 'r', 'rpha']])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6f555ab4f0>
            a   b   m   n     frequency         r        rpha
    748    10  29  15  34      0.100000  7.356375   -5.205543
    2228   10  29  15  34      0.314465  7.323810   -6.903037
    3708   10  29  15  34      1.000000  7.282164   -7.242394
    5188   10  29  15  34      3.125000  7.239073   -6.332998
    6668   10  29  15  34     10.000000  7.199660  -12.081013
    8148   10  29  15  34     31.250000  7.176920   -3.132819
    9628   10  29  15  34    110.000000  7.170031    4.958888
    11108  10  29  15  34    312.500000  7.211899    8.671063
    12588  10  29  15  34   1000.000000  7.325287   -2.429873
    14068  10  29  15  34   3150.000000  7.313380  -37.892727
    15548  10  29  15  34  10000.000000  7.035541 -100.904824




.. GENERATED FROM PYTHON SOURCE LINES 84-85

in a similar fashion, spectra can be extracted and plotted

.. GENERATED FROM PYTHON SOURCE LINES 85-97

.. code-block:: default

    spec_nor, spec_rec = seit.get_spectrum(abmn=(10, 29, 15, 34))

    print(type(spec_nor))
    print(type(spec_rec))

    with reda.CreateEnterDirectory('output_eit_fzj'):
        spec_nor.plot(filename='spectrum_10_29_15_34.pdf')

    # Note that there is also the convenient script
    # :py:meth:`reda.sEIT.plot_all_spectra`, which can be used to plot all spectra
    # of the container into separate files, given an output directory.





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'reda.eis.plots.sip_response'>
    <class 'reda.eis.plots.sip_response'>




.. GENERATED FROM PYTHON SOURCE LINES 98-99

filter data

.. GENERATED FROM PYTHON SOURCE LINES 99-105

.. code-block:: default

    seit.remove_frequencies(1e-3, 300)
    seit.query('rpha < 10')
    seit.query('rpha > -40')
    seit.query('rho_a > 15 and rho_a < 35')
    seit.query('k < 400')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Remaining frequencies:
    [0.1, 0.31446541, 1.0, 3.125, 10.0, 31.25, 110.0]




.. GENERATED FROM PYTHON SOURCE LINES 106-108

Plotting histograms
Raw data plots (execute before applying the filters):

.. GENERATED FROM PYTHON SOURCE LINES 108-134

.. code-block:: default


    # import os
    # import reda.plotters.histograms as redahist

    # if not os.path.isdir('hists_raw'):
    #     os.makedirs('hists_raw')

    # # plot histograms for all frequencies
    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )
    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig('hists_raw/hist_raw_f_{0}.png'.format(f), dpi=300)

    # if not os.path.isdir('hists_filtered'):
    #     os.makedirs('hists_filtered')

    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )

    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig(
    #         'hists_filtered/hist_filtered_f_{0}.png'.format(f), dpi=300
    #     )








.. GENERATED FROM PYTHON SOURCE LINES 135-137

Now export the data to CRTomo-compatible files
this context manager executes all code within the given directory

.. GENERATED FROM PYTHON SOURCE LINES 137-141

.. code-block:: default

    with reda.CreateEnterDirectory('output_eit_fzj'):
        import reda.exporters.crtomo as redaex
        redaex.write_files_to_directory(seit.data, 'crt_results', norrec='nor', )








.. GENERATED FROM PYTHON SOURCE LINES 142-143

Plot pseudosections of all frequencies

.. GENERATED FROM PYTHON SOURCE LINES 143-159

.. code-block:: default

    import reda.plotters.pseudoplots as PS
    import pylab as plt

    with reda.CreateEnterDirectory('output_eit_fzj'):
        g = seit.data.groupby('frequency')
        fig, axes = plt.subplots(
            4, 2,
            figsize=(15 / 2.54, 20 / 2.54),
            sharex=True, sharey=True
        )
        for ax, (key, item) in zip(axes.flat, g):
            fig, ax, cb = PS.plot_pseudosection_type2(item, ax=ax, column='r')
            ax.set_title('f: {} Hz'.format(key))
        fig.tight_layout()
        fig.savefig('pseudosections_eit40.pdf')




.. image-sg:: /_examples/06_eit_fzj/images/sphx_glr_plot_eit_fzj_001.png
   :alt: f: 0.1 Hz, f: 0.31446541 Hz, f: 1.0 Hz, f: 3.125 Hz, f: 10.0 Hz, f: 31.25 Hz, f: 110.0 Hz
   :srcset: /_examples/06_eit_fzj/images/sphx_glr_plot_eit_fzj_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-161

alternative

.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: default

    with reda.CreateEnterDirectory('output_eit_fzj'):
        seit.plot_pseudosections(
            column='r', filename='pseudosections_eit40_v2.pdf'
        )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  46.424 seconds)


.. _sphx_glr_download__examples_06_eit_fzj_plot_eit_fzj.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_eit_fzj.py <plot_eit_fzj.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_eit_fzj.ipynb <plot_eit_fzj.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
